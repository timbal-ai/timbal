{
  "openapi": "3.1.0",
  "info": {
    "title": "Timbal Platform API",
    "description": "Public API documentation for the Timbal platform",
    "license": {
      "name": ""
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://dev.timbal.ai"
    }
  ],
  "paths": {
    "/orgs/{org_id}/apps/{app_id}/runs": {
      "get": {
        "tags": [
          "runs"
        ],
        "description": "List runs for a specific application",
        "operationId": "handler",
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "app_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "Filter runs by user ID",
            "required": false,
            "schema": {
              "type": [
                "integer",
                "null"
              ],
              "format": "int64"
            }
          },
          {
            "name": "version_id",
            "in": "query",
            "description": "Filter runs by version ID",
            "required": false,
            "schema": {
              "type": [
                "integer",
                "null"
              ],
              "format": "int64"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter runs by status",
            "required": false,
            "schema": {
              "type": [
                "string",
                "null"
              ]
            }
          },
          {
            "name": "sentiment",
            "in": "query",
            "description": "Filter runs by sentiment",
            "required": false,
            "schema": {
              "type": [
                "string",
                "null"
              ]
            }
          },
          {
            "name": "group_id",
            "in": "query",
            "description": "Filter runs by group ID",
            "required": false,
            "schema": {
              "type": [
                "integer",
                "null"
              ],
              "format": "int64"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Filter runs by start time (epoch timestamp in milliseconds)",
            "required": false,
            "schema": {
              "type": [
                "integer",
                "null"
              ],
              "format": "int64"
            },
            "example": 1729540800000
          },
          {
            "name": "to",
            "in": "query",
            "description": "Filter runs by end time (epoch timestamp in milliseconds)",
            "required": false,
            "schema": {
              "type": [
                "integer",
                "null"
              ],
              "format": "int64"
            },
            "example": 1729627200000
          },
          {
            "name": "metadata",
            "in": "query",
            "description": "Filter runs by metadata",
            "required": false,
            "schema": {
              "type": [
                "string",
                "null"
              ]
            }
          },
          {
            "name": "page_token",
            "in": "query",
            "description": "Page token",
            "required": false,
            "schema": {
              "type": [
                "integer",
                "null"
              ],
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Runs listed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListRunsResBody"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      }
    },
    "/orgs/{org_id}/apps/{app_id}/runs/{run_id}": {
      "patch": {
        "tags": [
          "runs"
        ],
        "description": "Update an existing platform run or link a local run with the platform",
        "operationId": "handler",
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "app_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "run_id",
            "in": "path",
            "description": "This can be a platform-defined id or a custom id.\nThe platform will map the custom id to an internal one afterwards.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRunReqBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Run updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RunPreview"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      }
    },
    "/orgs/{org_id}/embedding-models": {
      "get": {
        "tags": [
          "embeddings"
        ],
        "description": "List all available embedding models for the organization",
        "operationId": "handler",
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Array of embedding models",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListEmbeddingModelsResBody"
                },
                "example": {
                  "embedding_models": [
                    "text-embedding-ada-002",
                    "text-embedding-3-small",
                    "text-embedding-3-large"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      }
    },
    "/orgs/{org_id}/files": {
      "post": {
        "tags": [
          "files"
        ],
        "description": "Upload a file to an org",
        "operationId": "handler",
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "file"
                ],
                "properties": {
                  "file": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "format": "int32",
                      "minimum": 0
                    },
                    "contentMediaType": "application/octet-stream"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "File uploaded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      }
    },
    "/orgs/{org_id}/kbs/{kb_id}/embeddings": {
      "get": {
        "tags": [
          "embeddings"
        ],
        "description": "List embeddings",
        "operationId": "handler",
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "kb_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "table_name",
            "in": "query",
            "required": false,
            "schema": {
              "type": [
                "string",
                "null"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Embeddings listed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListEmbeddingsResBody"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      },
      "post": {
        "tags": [
          "embeddings"
        ],
        "description": "Create a new embedding",
        "operationId": "handler",
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "kb_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEmbeddingReqBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Embedding created successfully"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      }
    },
    "/orgs/{org_id}/kbs/{kb_id}/embeddings/{embedding_name}": {
      "delete": {
        "tags": [
          "embeddings"
        ],
        "description": "Delete an embedding",
        "operationId": "handler",
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "kb_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "embedding_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Embedding deleted successfully"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      }
    },
    "/orgs/{org_id}/kbs/{kb_id}/indexes": {
      "get": {
        "tags": [
          "indexes"
        ],
        "description": "List indexes for a KB",
        "operationId": "handler",
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "kb_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "table_name",
            "in": "query",
            "description": "Table name to filter indexes by",
            "required": false,
            "schema": {
              "type": [
                "string",
                "null"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Array of indexes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListIndexesResBody"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      },
      "post": {
        "tags": [
          "indexes"
        ],
        "description": "Create a new index on a table",
        "operationId": "handler",
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "kb_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateIndexReqBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Index created successfully"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      }
    },
    "/orgs/{org_id}/kbs/{kb_id}/indexes/{index_name}": {
      "delete": {
        "tags": [
          "indexes"
        ],
        "description": "Delete an index",
        "operationId": "handler",
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "kb_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "index_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Index deleted successfully"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      }
    },
    "/orgs/{org_id}/kbs/{kb_id}/tables/{table_name}/csv": {
      "post": {
        "tags": [
          "tables"
        ],
        "description": "Insert or update rows into a table from a CSV file",
        "operationId": "handler",
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "kb_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "table_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/csv": {

            }
          }
        },
        "responses": {
          "204": {
            "description": "Rows inserted successfully"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      }
    },
    "/orgs/{org_id}/kbs/{kb_id}/tables/{table_name}/records": {
      "post": {
        "tags": [
          "tables"
        ],
        "description": "Insert or update records into a table",
        "operationId": "handler",
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "kb_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "table_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertRecordsReqBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Records upserted successfully"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      }
    },
    "/orgs/{org_id}/kbs/{kb_id}/tables/{table_name}/search": {
      "post": {
        "tags": [
          "tables"
        ],
        "description": "Search for records in a table",
        "operationId": "handler",
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "kb_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "table_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchTableReqBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Array of records matching the search query. Structure depends on the table schema and selected columns.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {

                  }
                },
                "example": [
                  {
                    "id": 1,
                    "name": "Alice Johnson",
                    "email": "alice@example.com"
                  },
                  {
                    "id": 2,
                    "name": null,
                    "email": "bob@example.com"
                  },
                  {
                    "id": 3,
                    "name": "Carol",
                    "email": "carol@example.com"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "CreateEmbeddingReqBody": {
        "type": "object",
        "required": [
          "name",
          "table_name",
          "column_name",
          "model",
          "with_gin_index"
        ],
        "properties": {
          "column_name": {
            "type": "string",
            "description": "Name of the source column"
          },
          "model": {
            "$ref": "#/components/schemas/EmbeddingModel",
            "description": "Embedding model to use. See the list embedding models endpoint for available options."
          },
          "name": {
            "type": "string",
            "description": "Name of the embedding"
          },
          "table_name": {
            "type": "string",
            "description": "Name of the source table"
          },
          "with_gin_index": {
            "type": "boolean",
            "description": "Whether to create a GIN index for the source column for faster hybrid search"
          }
        }
      },
      "CreateIndexReqBody": {
        "type": "object",
        "required": [
          "table_name",
          "name",
          "column_names",
          "type",
          "is_unique"
        ],
        "properties": {
          "column_names": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of column names to index. At least one column is required. Multiple columns will create a composite index"
          },
          "is_unique": {
            "type": "boolean",
            "description": "Whether the index should enforce uniqueness"
          },
          "name": {
            "type": "string",
            "description": "Index name. This must be unique in the entire Knowledge Base"
          },
          "table_name": {
            "type": "string",
            "description": "Table name"
          },
          "type": {
            "$ref": "#/components/schemas/IndexType",
            "description": "Index type"
          }
        }
      },
      "Deployment": {
        "type": "object",
        "required": [
          "status"
        ],
        "properties": {
          "status": {
            "type": "string"
          }
        }
      },
      "Embedding": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EmbeddingStatus"
          },
          {
            "type": "object",
            "required": [
              "id",
              "name",
              "table_name",
              "column_name",
              "model",
              "created_at",
              "updated_at"
            ],
            "properties": {
              "column_name": {
                "type": "string"
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "model": {
                "$ref": "#/components/schemas/EmbeddingModel"
              },
              "name": {
                "type": "string"
              },
              "table_name": {
                "type": "string"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        ]
      },
      "EmbeddingModel": {
        "type": "string"
      },
      "EmbeddingStatus": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "details",
              "status"
            ],
            "properties": {
              "details": {
                "type": "object"
              },
              "status": {
                "type": "string",
                "enum": [
                  "pending"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "details",
              "status"
            ],
            "properties": {
              "details": {
                "type": "object",
                "properties": {
                  "processed_rows": {
                    "type": [
                      "integer",
                      "null"
                    ],
                    "format": "int64"
                  },
                  "total_rows": {
                    "type": [
                      "integer",
                      "null"
                    ],
                    "format": "int64"
                  }
                }
              },
              "status": {
                "type": "string",
                "enum": [
                  "processing"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "details",
              "status"
            ],
            "properties": {
              "details": {
                "type": "object"
              },
              "status": {
                "type": "string",
                "enum": [
                  "success"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "details",
              "status"
            ],
            "properties": {
              "details": {
                "type": "object",
                "required": [
                  "error"
                ],
                "properties": {
                  "error": {
                    "type": "string"
                  }
                }
              },
              "status": {
                "type": "string",
                "enum": [
                  "error"
                ]
              }
            }
          }
        ]
      },
      "File": {
        "type": "object",
        "required": [
          "content_length",
          "content_type",
          "created_at",
          "name",
          "id",
          "url"
        ],
        "properties": {
          "content_length": {
            "type": "integer",
            "format": "int64",
            "description": "The content length of the file in bytes"
          },
          "content_type": {
            "type": "string",
            "description": "The content type of the file"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The time the file was created"
          },
          "expires_at": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time",
            "description": "The time the file expires at"
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier for the file"
          },
          "name": {
            "type": "string",
            "description": "The name of the file"
          },
          "url": {
            "type": "string",
            "description": "The URL where the file can be accessed"
          }
        }
      },
      "Index": {
        "type": "object",
        "required": [
          "table",
          "name",
          "columns",
          "type",
          "is_unique",
          "definition"
        ],
        "properties": {
          "columns": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "definition": {
            "type": "string"
          },
          "is_unique": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "table": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/IndexType"
          }
        }
      },
      "IndexType": {
        "type": "string",
        "enum": [
          "btree",
          "hash",
          "gin",
          "gist",
          "brin",
          "hnsw"
        ]
      },
      "ListEmbeddingModelsResBody": {
        "type": "object",
        "required": [
          "embedding_models"
        ],
        "properties": {
          "embedding_models": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmbeddingModel"
            }
          }
        }
      },
      "ListEmbeddingsResBody": {
        "type": "object",
        "required": [
          "embeddings"
        ],
        "properties": {
          "embeddings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Embedding"
            }
          }
        }
      },
      "ListIndexesResBody": {
        "type": "object",
        "required": [
          "indexes"
        ],
        "properties": {
          "indexes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Index"
            }
          }
        }
      },
      "ListRunsResBody": {
        "type": "object",
        "required": [
          "runs"
        ],
        "properties": {
          "group_id": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int64",
            "description": "The `group_id` filter applied to the query"
          },
          "next_page_token": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int64",
            "description": "Cursor for the next page"
          },
          "runs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RunPreview"
            },
            "description": "List of runs"
          },
          "user_id": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int64",
            "description": "The `user_id` filter applied to the query"
          }
        }
      },
      "RunPreview": {
        "type": "object",
        "required": [
          "id",
          "user",
          "version",
          "status",
          "cost_usd",
          "created_at"
        ],
        "properties": {
          "cost_usd": {
            "type": "number",
            "format": "double"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "duration_ms": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int64"
          },
          "group_id": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int64"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "last_reaction_sentiment": {
            "type": [
              "string",
              "null"
            ]
          },
          "parent_id": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int64"
          },
          "status": {
            "type": "string"
          },
          "trace": {

          },
          "user": {
            "$ref": "#/components/schemas/UserRef"
          },
          "version": {
            "$ref": "#/components/schemas/VersionRef"
          }
        },
        "additionalProperties": {

        }
      },
      "SearchTableReqBody": {
        "type": "object",
        "required": [
          "query",
          "embedding_names"
        ],
        "properties": {
          "embedding_names": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of embedding names to use for semantic search. Only a single column is supported at the moment."
          },
          "fts_columns": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "string"
            },
            "description": "List of column names to use for full-text search. When specified together with embedding_names, search will be hybrid (both semantic and full-text)."
          },
          "limit": {
            "type": "integer",
            "format": "int64",
            "description": "Maximum number of results to return.",
            "default": 10
          },
          "offset": {
            "type": "integer",
            "format": "int64",
            "description": "Number of results to skip before returning.",
            "default": 0
          },
          "query": {
            "type": "string",
            "description": "Semantic search query."
          },
          "select_columns": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "string"
            },
            "description": "List of column names to return in the search results. When not specified, all columns will be returned."
          },
          "where": {
            "type": [
              "string",
              "null"
            ],
            "description": "SQL WHERE expression to apply to the search. This feature is _experimental_ and may be removed or changed in the future."
          }
        }
      },
      "UpdateRunReqBody": {
        "type": "object",
        "required": [
          "trace"
        ],
        "properties": {
          "parent_id": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int64",
            "description": "Parent run identifier (if any)"
          },
          "trace": {
            "description": "Trace data"
          },
          "version_id": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int64",
            "description": "Version identifier (if any)"
          }
        }
      },
      "UpsertRecordsReqBody": {
        "type": "object",
        "required": [
          "records"
        ],
        "properties": {
          "records": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {

              },
              "propertyNames": {
                "type": "string"
              }
            },
            "description": "Array of records to insert or update (at least one record is required)"
          }
        }
      },
      "UserRef": {
        "type": "object",
        "required": [
          "id",
          "name",
          "email"
        ],
        "properties": {
          "email": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "photo_url": {
            "type": [
              "string",
              "null"
            ]
          }
        }
      },
      "VersionRef": {
        "type": "object",
        "required": [
          "id",
          "name",
          "is_prod"
        ],
        "properties": {
          "deployment": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/Deployment"
              }
            ]
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "is_prod": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "bearer_auth": {
        "type": "http",
        "scheme": "bearer",
        "description": "Timbal API key. Obtain your API key from the Timbal platform settings. See [Authentication](/api-reference/authentication) for more information."
      }
    }
  },
  "tags": [
    {
      "name": "embeddings",
      "description": "KB Embeddings operations"
    },
    {
      "name": "files",
      "description": "File operations"
    },
    {
      "name": "indexes",
      "description": "KB Indexes operations"
    },
    {
      "name": "runs",
      "description": "Execution operations"
    },
    {
      "name": "tables",
      "description": "KB Tables operations"
    }
  ]
}