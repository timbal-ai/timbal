{
  "openapi": "3.1.0",
  "info": {
    "title": "Timbal Platform API",
    "description": "API documentation for the Timbal platform",
    "license": {
      "name": ""
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://dev.timbal.ai"
    }
  ],
  "paths": {
    "/orgs/{org_id}/kbs/{kb_id}/tables/{table_name}/search": {
      "post": {
        "tags": [
          "crate::handlers::orgs::kbs::tables::search"
        ],
        "operationId": "handler",
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "kb_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "table_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReqBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Array of records matching the search query. Structure depends on the table schema and selected columns.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {

                  }
                },
                "example": [
                  {
                    "id": 1,
                    "name": "Alice Johnson",
                    "email": "alice@example.com"
                  },
                  {
                    "id": 2,
                    "name": null,
                    "email": "bob@example.com"
                  },
                  {
                    "id": 3,
                    "name": "Carol",
                    "email": "carol@example.com"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "ReqBody": {
        "type": "object",
        "required": [
          "query",
          "embedding_names"
        ],
        "properties": {
          "embedding_names": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of embedding names to use for semantic search. NOTE: Querying with multiple embeddings is not supported yet, but the API is ready and this feature is coming soon."
          },
          "fts_columns": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "string"
            },
            "description": "List of column names to use for full-text search. When specified together with embedding_names, search will be hybrid (both semantic and full-text)."
          },
          "limit": {
            "type": "integer",
            "format": "int64",
            "description": "Maximum number of results to return.",
            "default": 10
          },
          "offset": {
            "type": "integer",
            "format": "int64",
            "description": "Number of results to skip before returning.",
            "default": 0
          },
          "query": {
            "type": "string",
            "description": "Semantic search query."
          },
          "select_columns": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "string"
            },
            "description": "List of column names to return in the search results. When not specified, all columns will be returned."
          },
          "where_clause": {
            "type": [
              "string",
              "null"
            ],
            "description": "SQL WHERE clause to apply to the search."
          }
        }
      }
    },
    "securitySchemes": {
      "bearer_auth": {
        "type": "http",
        "scheme": "bearer",
        "description": "Timbal API key. Obtain your API key from the Timbal platform settings. See [Authentication](/api-reference/authentication) for more information."
      }
    }
  }
}